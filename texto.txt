Regex101 => https://regex101.com/
-----------------------------------------------
-------------Comandos no terminal com regex-------------
grep [regex]
exemplo => grep Anna /home/camila/database.csv
exemplo => grep Beatrice /home/camila/database.csv
exemplo => grep -n Anna /home/camila/database.csv
-n => retorna a linha onde a ocorrência apareceu
-----------------------------------------------
-------------Regex-------------
\d => digitos
+ => repetição
//g => pega todo arquivo
\ => escape
\s => espaço
{2} => repetição de 2 vezes
{4,5} => repetição de 4 a 5 vezes
[.-] => sequencias de caracteres
? => opcional (pode ou não aparecer) (0 ou 1 vez)
\m => multilinhas
\w => retorna qualquer palavra (varios caracteres)
() => grupo de captura
()+ => repetição de grupo de captura
[À-ÿ] => caracteres acentuados
?: => grupo de não captura que não pega es vazio no início
. => qualquer caractere
[1|2] => backreference (espelho de referencia a um grupo)
\b => limite da palavra (exemplo busca uma palavra isoladamente)
\i => isensitive (não difere maiusculas e minusculas)
^ => antecipação negada
| => ou (exemplo: .|- => . ou -)

## Classes de Caracteres
[a-z] => Qualquer letra minúscula de 'a' a 'z' ("a", "m", "z")
[0-9] => Qualquer dígito de 0 a 9 ("0", "7", "9")
[A-Za-z] => Qualquer letra maiúscula ou minúscula ("A", "b", "Z")
[0-9A-Fa-f] => Qualquer caractere hexadecimal ("1", "A", "d")
[^0-9] => Qualquer caractere que não seja um dígito ("a", "B", "!")
[aeiou] => Qualquer vogal minúscula ("a", "e", "o")
[^aeiou] => Qualquer caractere que não seja uma vogal ("b", "z", "1")
[|?/’] => Caracteres literais ("|", "/", " ? ", “‘”)

- => Hífen usado para definir intervalos de caracteres. Pode ser escapado com \ para ser tratado como um literal.
] => Colchete de fechamento usado para marcar o fim de uma classe de caracteres. Pode ser escapado com \ para ser tratado como um literal.
^ => Circunflexo usado para negar uma classe de caracteres quando colocado no início de [ ]. Dentro de [ ], é tratado como um literal. Ancora
\ => Barra invertida usada para escapar caracteres especiais dentro de [ ] para que sejam tratados como literais.

## Shorthands
\d => Qualquer dígito decimal ("0", "7", "9")
\D => Qualquer caractere que não seja um dígito ("a", "B", "!")
\w => Qualquer caractere alfanumérico ("A", "b", "0")
\W => Qualquer caractere que não seja alfanumérico ("!", "@", " ")
\s => Qualquer caractere de espaço em branco (" ", "\t", "\n")
\S => Qualquer caractere que não seja espaço em branco ("a", "B", "9")

## Escapes
\[ => Colchete de abertura [ literal ("[")
\] => Colchete de fechamento ] literal ("]")
\. => Ponto . literal (".")
\+ => Sinal de adição + literal ("+")
\\ => Escape \ literal ("")

## quantifiers
* => Coincide com 0 ou mais ocorrências do elemento anterior. (a* corresponde a "", "a", "aa", "aaa", etc.)
+ => Coincide com 1 ou mais ocorrências do elemento anterior. (a+ corresponde a "a", "aa", "aaa", etc., mas não a "".)
? => Coincide com 0 ou 1 ocorrência do elemento anterior. (a? corresponde a "" ou "a".)
{n} => Coincide exatamente com “n” ocorrências do elemento anterior. (a{3} corresponde a "aaa", mas não a "aa" ou "a".)
{n,} => Coincide com pelo menos “n” ocorrências do elemento anterior. (a{2,} corresponde a "aa", "aaa", "aaaa", etc.)
{n,m} => Coincide com pelo menos “n” e no máximo “m” ocorrências do elemento anterior. (a{2,4} corresponde a "aa", "aaa" ou "aaaa", mas não a "a" ou "aaaaa".)
